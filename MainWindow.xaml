<Window x:Class="TreeViewsValueConverters.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:TreeViewsValueConverters"
        xmlns:helper="clr-namespace:TreeViewsValueConverters.Helper"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800">

    <!-- 只需要在View绑定到指定的属性即可 -->
    <!--<Button Content="{Binding MyProperty}" />-->
    <Grid>
        <!-- 绑定到ViewModel中的属性上面 -->
        <TreeView x:Name="FloderView" ItemsSource="{Binding Items}">
            <!-- 定义Style样式，x:来自于命名空间的名称; Type表明类型，TreeViewItem是一个Class -->
            <!-- TreeView包含多个TreeViewItem -->
            <!--<TreeView.Resources>
                <Style TargetType="{x:Type TreeViewItem}">
                    使用DataTemplate来定义HeaderTemplate属性(TreeViewIteml类的属性)
                    <Setter Property="HeaderTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <StackPanel Orientation="Horizontal">                        
                                    绑定 FindAncestor找到父类级别的类型TreeViewItem, 再绑定path到属性Tag(完整的路径)，通过命名空间访问类型，访问到静态属性
                                    <Image Margin="3" Width="20" Source="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TreeViewItem}}, Path=Tag, Converter={x:Static helper:HeaderToImageConverter.Instance}}"/>                   
                                    Text绑定HeaderTemplate自身的"属性值 Header"
                                    <TextBlock Text="{Binding}" VerticalAlignment="Center"/>
                                </StackPanel>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </TreeView.Resources>-->

            <!-- MVVM绑定的处理方式: 里面是绑定的每一个DirectoryItemViewModel中的属性 -->
            <TreeView.ItemContainerStyle>
                <Style TargetType="{x:Type TreeViewItem}">
                    <Setter Property="IsExpanded" Value="{Binding IsExpand, Mode=TwoWay}" />
                </Style>
            </TreeView.ItemContainerStyle>
            <TreeView.ItemTemplate>
                <!-- 层级的绑定效果 -->
                <HierarchicalDataTemplate ItemsSource="{Binding Children}" >
                    <StackPanel Orientation="Horizontal">
                        <!-- 通过Type类型来加载相应的Icon -->
                        <Image Margin="3" Width="20" Source="{Binding Type, Converter={x:Static helper:HeaderToImageConverter.Instance}}"/>
                        <TextBlock Text="{Binding Name}" VerticalAlignment="Center"/>
                    </StackPanel>
                </HierarchicalDataTemplate>
            </TreeView.ItemTemplate>
        </TreeView>
    </Grid>
</Window>
